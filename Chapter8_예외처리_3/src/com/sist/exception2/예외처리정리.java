package com.sist.exception2;
/*
 * 414 page
 * --------
 * 1. 프로그래머 실수
 * 2. 사용자의 실수 (입력값) ==> 유효성 검사(자바스크립트)
 * -------------------------------------------
 * 3. 오작동 / 비정상 종료
 * ------------------------ 에러 / 오류
 * 
 * 예외처리 : 소스상에 수정이 가능한 에러
 * 			예) 파일명이 틀리다, IP가 틀리다, URL 주소가 틀리다, 0으로 입력, 배열 인덱스 초과 ...
 * ==> 컴파일에러	/ 런타임 에러(실행시 에러) UnCheckException => 예외처리 필수(선택)
 * 		------		---------------
 * 		CheckedException => 컴파일러가 확인(반드시 예외처리를 해야된다)
 * ==> 1. 에러를 사전에 방지하는 프로그램, 2. 정상적으로 수행이 가능하게 만든다(견고한 프로그램)
 * ==> 잘 짠 프로그램
 * 		1. 가독성 : 다른 개발자가 쉽게 알아볼 수 있게 만든다(유지보수에 초첨) #코딩 자체가 읽기가 편하다 
 * 					1) 구조적인 프로그램 : 메소드(기능별 분류)
 * 					2) 재사용
 * 					3) 수정, 추가
 * 					-------------------------> 객체지향 프로그램
 * 		2. 최적화 : 실행속도가 빠르게 만든다
 * 					웹에서 최적화(데이터전송속도와 화면 출력속도)
 * 										  ---------- React, Vue
 * 		3. 견고성 : 에러에 대응할 수 있는 프로그램 => 예외처리
 *	==> 예외처리 방법
 *		- 예외처리 => 소스가 변경되는 것은 아니다, 복구해서 실행해 주는 것은 아니다, 에러부분을 잘라내기
 *					------------1
 *					------------2
 *					=========================== 정상수행
 *					------------3 ==> 에러
 *					------------4
 *					=========================== 건너뛰기
 *					------------catch =====> 새로운 코드 실행
 *					==> 변수 
 *						==> 제일 먼저 고민하는 부분은 "명시적인 초기화"(꼭 생성자 없어도 괜찮)
 *					==> 예외처리
 *						==> if문으로 처리가 가능하면 if문으로 처리한다. 
 *						==> try = if, catch = else
 *		- 직접처리 (예외복구)
 *			try{정상적으로 실행되는 문장(오류가 발생할 수도 있다. #일부로 에러를 내는 프로그램을 집어넣는 것은 아님)}
 *			catch{}
 *			finally{}
 *		- 간접처리 (예외회피 : 다른 사람이 예외를 처리할 수 있도록)  
 * 
 * 		
 * 
 * 
 * 
 * 
 */
public class 예외처리정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
