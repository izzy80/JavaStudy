/*
 * 		생성자 (필요시에만 사용) => 클래스에는 반드시 첨부
 * 		-----				  ----- 컴파일러가 자동 첨부
 * 		역할 : 인스턴스 초기화 메소드
 * 			  ---------------- 변수에 필요한 데이터 첨부
 * 				멤버변수 초기화를 담당
 * 				인스턴스를 생성시에 호출되는 메소드
 * 
 * 				=> new 생성자() 
 * 				==> 시작과 동시에 작업이 필요한 경우에 많이 이용
 * 				예)  외부 데이터 읽기 => 날씨 읽기, 뉴스
 * 					파일 읽기 
 * 					쿠키 읽기 => 자동로그인
 * 					오라클 연결 => 연결하는 시간이 오래걸려서 미리 연결하고 페이지 띄워야함. 연결하지 않으면 메인 페이지 로딩하는데 1~2분 걸림
 * 					
 * 		특징 :
 * 				1) 클래스명과 동일
 * 				2) 리턴형이 없다
 * 				3) 여러개를 만들 수 있다(오버로딩)
 * 
 * 		멤버변수 => 인스턴스 변수
 * 		--------------------
 * 		기본 초기값이 자동으로 설정
 * 		-----------------------------------> 필요한 데이터값
 * 		class ClassName
 * 		{
 * 			------------------
 * 			1. 명시적 초기화 int a=10;
 * 						a = 100; ======> 오류
 * 				class영역에서는 외부나 파일 읽기를 할 수 없다. 
 * 							 ----------- 생성자, 초기화 블록 
 * 				class영역에서는 선언만 가능하다
 * 				-------- 메소드 호출, 값을 대입, 제어문(X)
 * 			------------------
 * 		}
 * 
 * 		생성자는 한개만 있는 것이 아니라 경우에 따라서 여러개 설정이 가능
 * 		생성자에는 생성자를 호출할 수 있다. 
 * 		------------------------- 생성자에서 생성자 호출 ==> this()
 * 		this => 자신의 객체 => new를 이용해서 메모리가 할당될때 자동으로 생성
 * 		--------------- 멤버메소드에서만 사용이 가능
 * 						------ 인스턴스변수, 인스턴스 메소드(static은 this를 사용할 수 없다)
 * 						지역변수와 멤버변수 구분할 때 주로 사용
 * 
 * 		1) 생성자
 * 			---- 
 * 			기본 생성자(디폴트 생성자) ==> () 매개변수가 없는 생성자
 * 			------------------------------------------ 생성자를 만들지 않는 경우 자동 생성
 * 			class A
 * 			{
 * 				A(){} ==> 자동 생성이 된다
 * 			}
 * 			*** 무조건 생성자가 존재
 * 			*** 메소드는 반드시 return이 존재
 * 			--------------------------- 생략할 수 있다(그럴 경우 자동으로 추가됨)
 * 
 * 			생성자는 여러개 존재 할 수 있다. 
 * 			----------------------
 * 			오버로딩이 가능하다 
 * 			-----
 * 			 1) 메소드명이 동일해야함 
 * 			 2) 매개변수 갯수나 데이터형이 다를때
 * 			 3) 같은 기능을 가지고 있는 경우에는 같은 메소드명으로 처리가 가능
 * 				bus()
 * 				bus(터보엔진)
 * 				bus(마을)
 * 				bus(좌석)
 * 			4) 생성자에서 오버로딩을 사용할 수 있다. 
 * 				-------------------------
 * 					= 멤버변수 초기화
 * 					*** 변수 초기화
 * 						-------- 명시적 초기화(시작과 동시에 값을 넣어주는 것 ex) int a = 20;) : 생성자를 사용하지 않는다. 
 * 						-------- 사용자로부터 입력값을 받아서 초기화 => 매개변수를 가지고 있는 생성자
 * 						-------- random() 사용 => 사용자의 입력값이 있는 것이 아니라 자체내에서 뽑아내서 디폴트 생성자 이용
 * 					*** 웹에서는 기본 생성자가 많이 사용된다. 
 * 					*** 매개변수를 가지고 있는 생성자가 한개이상 존재하면 (컴파일러가 기본생성자를 첨부하지 않는다)
 * 					 ##	웹에서는 사이트를 먼저 검색창 같은 것을 띄워주기 때문에 사용자로부터 입력값을 받아서 초기화하는 것은 사용하지 않을 것임. 
 * 						그래서 특별한 경우를 제외하고 매개변수 사용하는 일이 거의 없음. 
 * 						class A
 * 						{
 * 							===> 없어서 자동으로 A(){} 생성
 * 						}
 * 			
 * 						class A
 * 						{
 * 							A(){} ==> 자동(X), 생성자가 이미 존재 
 * 						}
 * 								
 * 						class A
 * 						{
 * 							A(int a){} ==> 자동(X)
 * 						}	
 * 						***** 매개변수가 있는 생성자도 생성자다
 */
public class 생성자_1 {
	/*int a=10; // class 영역에서는 선언만 가능
	//a=100; -> 오류
	public 생성자_1() {
		a=100; // class가 아닌 블록에서 초기화해야함. 
	}
	*/
	int a=10; //멤버변수(>인스턴스 변수) 클래스가 가지고 있는 변수, static(공유변수 => Heap 영역)
	생성자_1() // 생성자_1() 앞에 void 붙으면 생성자가 아니라 일반 함수가 되어버림. 
	{
		int a=20; // 지역변수(Stack 영역) ==> 지역변수 우선순위 
		System.out.println(a+","+this.a);// 멤버변수 파란색 a, 지역변수 밤색 a
		System.out.println("this="+this);
	}
	/*
	 *  A a = new A();
	 *  	  --- --- 생성된 메모리에 데이터값을 대입하는 역할
	 *  	   |
	 *  	메모리(heap)에 a라는 객체생성
	 *  	----------------------
	 *  	a에 지정된 메모리 주소를 넘겨준다
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		생성자_1 a = new 생성자_1(); // 모든 클래스의 객체를 생성 => this(생성된 주소값을 this라는 객체에 저장)
		System.out.println("a="+a);
		생성자_1 a1 = new 생성자_1(); 
		System.out.println("a1="+a1);
		// ?????????????????????????????????머라는 건지 공부하자
		// 멤버변수와 지역변수를 어떻게 구분할까? => this를 사용하여 멤버변수를 가져온다. 
		/*
		 * 	1. 컴파일러가 하는 역할
		 * 	1) 메모리 할당 (메모리 배정)
		 * 	2) this = a
		 * 		--- static 
		 */
		
	}

}
