/*
 * 1) 변수 설정 2) 변수 사용법 3) 범위 
 * ---------- 지역변수 (멤버변수=전역변수) , 매개변수(사용자의 입력값을 받는 경우)
 * 				-----
 * 					-------객체변수, 공유변수
 * 
 * 1) 연산자 종류 2) 처리방법(결과값 예측) 3) //-> 여기까지 배움 // 응용 => 사용처 확인
 * 									------------------- 조건(부정연산자, 논리연산자, 비교연산자), 산술연산자, 대입연산자
 * 1) 제어문의 종류 2) 형식 3) 동작 순서 4) 응용(배열) ==> 코테(80%)
 * 									----------------------
 * 
 * 1. 제어문의 종류 $이차포문 거의 쓸일 없음. 웹은 거의 일차포문.이차포문은 거의 알고리즘.$
 * 		= 조건문 (조건문, 선택문)
 * 			=> 단일 조건문(독립적으로 수행) 
 * 			$다중은 중간에 걸리면 빠져나가지만 단일조건문의 if는 10번 쓰면 10번 다 걸려가면서 돌려야함.그래서 중복이 있는지 없는지 확인해야함.중복이 있는 경우 단일조건문 사용$
 * 				형식) 
 * 					if(조건문) $하나의 문장만 수행하면 블록 안 써도 괜찮지만 수정을 용이하게 하기 위하여 가급적이면 쓰는 것을 추천$
 * 					{
 * 						조건이 true일때 수행하는 문장;
 * 					}
 * 					$제어문 뒤에 세미콜론 찍지 말아라. if뒤에 찍으면 문장이 끝난 것.$
 * 			=> 선택 조건문 : true, false를 나눠서 처리 ===> 아이디중복체크, 로그인 여부, 검색어 입력  $가장 많이 사용$
 * 				형식)
 * 					if(조건문)
 * 					{
 * 						조건이 true일때
 * 					}
 * 					else
 * 					{
 * 						조건이 false일때
 * 					}
 * 						================================= 삼항연산자
 * 			=> 다중 조건문 : 해당 조건에 맞는 조건문만 실행(1개만 실행) ==========> switch-case ===> 메뉴
 * 				형식)
 * 					if(조건문) ================================================> +
 * 					{
 * 						조건 true =====> 수행문장 ===> 종료
 * 						조건 false
 * 							↓
 * 					}
 * 					else if(조건문) ================================================> -
 * 					{
 * 						조건 true =====> 수행문장 ===> 종료
 * 						조건 false
 * 							↓
 * 					}
 * 					else if(조건문) ================================================> *
 * 					{
 * 						조건 true =====> 수행문장 ===> 종료
 * 						조건 false
 * 							↓
 * 					}
 * 					else if(조건문) ================================================> /
 * 					{
 * 						조건 true =====> 수행문장 ===> 종료
 * 						조건 false
 * 							↓
 * 					}
 * 					else ==> 해당 조건이 없는 경우 처리(생략이 가능)
 * 					{
 * 						해당 조건이 없는 경우 ==> 경고 문구
 * 					}
 * 			=> 선택문 : 1개만 실행이 가능하게 만든다.
 * 				------다중조건문(범위 지정 가능), 한개 데이터값만 선택 가능
 * 				switch(사용자가 보내준값) ==> 정수, 문자, 문자열(실수는 불가)
 * 				{
 * 					case 정수:
 * 						locatoin.href="/movie/list";
 * 					case 정수:
 * 						location.href="/movie/detail";
 *					default:
 *						location.href="/main"; 
 * 				}
 * 		= 반복문
 * 			=> for ======> 반복횟수를 알고 있는 경우 => 이중 for문 (목록 출력, 페이지 나누기)
 * 				형식)
 * 							1 -> 2  <- 4 
 * 						for(초기값;범위;증감식)
 * 								|3
 * 							반복실행문장
 * 									true
 * 							1--> 2 -------> 3 ------> 4
 * 									  | false면 종료
 * 							2 -------> 3 ------> 4
 * 									  | false면 종료
 * 							2 -------> 3 ------> 4
 * 									  | false면 종료 
 * 
 * 				예)
 * 				1~100
 * 				for(int i=1; i<=100,i++)
 * 				100~1
 * 				for(int i=100;i>=1,i--)
 * 				A~Z
 * 				for(char c='A';c<='Z';c++)
 * 				1~100홀수
 * 				for(int i=1;i<=100;i+=2) //짝수면 int i=2로 바꾸기.
 * 				5~100 5의 배수
 * 				for(int i=5;i<=100;i+=5)
 * 				
 * 
 * 			=> while ===> 반복횟수를 모르는 경우 => 무한루프 (네트워크 서버, 데이터베이스 값 가지고 올 때) => 서버단 $클라이언트 for문 서버는 while문$
 * 				형식) 
 * 					초기값                =============> 1
 * 					while(조건식)			=============> 2 false 종료 => 수행이 안 될 수도 있다. (선조건)
 * 					{
 * 							|true
 * 						반복 수행문장		=============> 3
 * 						증감식			=============> 4   =============== 증가된 값 =====> 조건식
 * 					} 
 * 				$while,for문 조건이 안 맞으면 아예 수행이 안 될 수도 있다. $
 * 				예)
 * 					String id="" => 사용자가 id전송 
 * 					$그런데 구매한 내역이 없어서 while문을 못 돌릴 수도 있다. 마이페이지 같은... $
 * 			
 * 					int i = 10;
 * 					while(i<10) false
 * 					{
 * 
 * 					}
 * 					
 * 			=> do-while  =======> 후조건(반드시 한번 이상 수행이 가능) ==> 웹에서 거의 사용빈도가 없다. 
 * 				형식) 
 * 					초기값	 =============> 1
 * 					do
 * 					{	
 * 						반복 수행 문장	 ========> 2
 * 						증가식	 =============> 3
 * 					}while(조건문)	 =========> 4
 * 					$조건이 맞든 아니든 일단 한번은 문장 수행 => 후조건$
 * 
 * 
 * 		= 반복제어문
 * 			=> 반복 중단 : break
 * 			=> 반복에서 특정 부분을 제외할 때  : continue
 * 
 * 
 * 
 */
public class 이중_for1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//1~10까지 출력
		System.out.println("1 2 3 4 5 6 7 8 9 10");
		System.out.println("=== for문 ===");
		for(int i=1;i<=10;i++)
		{
			System.out.print(i+" ");
		}
		
		System.out.println("\n=== while문 ===");
		int i = 1;
		while(i<=10)
		{
			System.out.print(i+" ");
			i++;
		}
		
		System.out.println("\n=== do-while문 ===");
		i=1; //$i는 이미 변수 선언이 되어 있으므로 초기화만 시켜주고나서 다시 사용 $
		do
		{
			System.out.print(i+" ");
			i++;
		}while(i<=10);
	}

}
