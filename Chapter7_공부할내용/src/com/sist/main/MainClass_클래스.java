package com.sist.main;
/*
 *  오라클, HTML/CSS, JavaScript, JSP, MVC, Spring, AWS => 자바 끝나고 배우는 것
 *  추가) JQuery(AJAX), VueJS(vuex, vue3), MyBatis
 *  				   ------
 *  추추가) Spring-Boot, ReactJS, Redux, JPA, MY-SQL
 *  				   -------
 *  ---------------------------------------------------------------------------------------
 *  오라클 시작하면 자바 공부할 시간 따로 없으니, 
 *  변수(데이터형), 연산자, 제어문, 배열(2~5장) => 스스로 공부하자~~~☆
 *  ---------------------------------------------------------------------------------------
 * 1) 클래스
 * 		= 클래스 정의하는 방법(객체지향 프로그램 => 클래스와 클래스의 연관 관계)
 * 			*** 접근지정어(공부 많이 해라!!)
 * 			= 클래스 : (다른 클래스와 연결해야 해서)public => 메모리 할당용
 * 			= 메소드 : 다른 클래스와 통신을 담담 (기능) ===> public 
 * 			= 변수 : 데이터 보호 ==> private
 * 			= 생성자 : 메모리 할당 => public
 * 				=> 클래스 만들려면 대상 분석(요구사항 분석) 필요 => 변수와 메소드를 파악
 * 			class ClassName
 * 			{
 * 				------------------------------------------------------------------------
 * 					속성, 필드 ==> 멤버변수(캡슐화 중심으로 보기) ==> getter/setter (변수 : 읽기/쓰기) = 인스턴스 변수 				
 * 					** 공유하는 변수(static)
 * 					** 변수는 기본형만 있는 것이 아니다. (배열, 클래스)
 * 				------------------------------------------------------------------------
 *  				생성자 : 오버로딩(어러개 있을 수 있다) => 변수에 대한 초기화 담당
 *  						생성자가 없는 경우 => 자동으로 추가(디폴트 생성자 => 매개변수 없는 생성자)
 * 				------------------------------------------------------------------------
 *  				메소드 : 기능 처리(속성, 필드)를 제어한다
 *  				위에 있는 속성, 필드와 관련이 없는 경우 (static 메소드)
 *  
 *  				String s = "Hello Java";
 *  				s가 가지고 있는 문자 갯수는? ==> s.length() => instance
 *  
 *  				ValueOf(10)
 *  				10을 문자열로 바꿔라 => 문자열과 관련이 없음 => static 
 *  				관련이 있냐 없냐에 따라 static 아니냐 이냐로 나눌 수 있다. 
 * 				-------------------------------------------------------------------------
 * 			}
 * 		= 객체 생성방법 (new)
 * 			클래스(사용자 데이터형) 저장 방법
 * 			기본형 ==> 메모리 자체에 값을 설정.
 * 				int a = 10;
 * 				----
 * 				10	a
 * 				-----
 * 				참조형 => 메모리에 실제로 저장된 데이터의 메모리 주소가 들어간다. ==> new의 역할
 * 				# 클래스라는 개념은 메모리에 데이터를 저장하는 것인데, 데이터가 여러개 일때 참조형은 데이터값이 메모리에 들어가지 못하고 주소값만 넘겨준다.
 * 				*** 클래스명 참조변수 = new 생성자()
 * 					  ------- 객체, 인스턴스
 * 				*** 클래스명 참조변수 = 클래스명.newInstance()
 * 				*** 클래스명 참조변수 = Class.forName().getInstance()
 * 				# 앞으로 new를 이용하지 않을 것이다. 			  			
 * 		= 메소드 정의하는 방법
 * 			[접근지정어][제어어] 리턴형 메소드명(매개변수...) -> <선언부>
 * 			{
 * 				<구현부>
 * 			}
 * 			public static : 객체마다 공통 사용되는 메소드 (데이터베이스 할때 많이 사용)
 * 			public final : 종단 메소드(오버라이딩이 불가능)
 * 			public abstract : 선언만 하는 메소드 ==> 구현 (프로그램에 맞게 구현해서 사용)
 * 			--------------- 추상 / 인터페이스(*****)
 * 		= 생성자 정의하는 방법 (291 Page)
 * 			= 특징
 * 				1) 클래스명과 동일
 * 				2) 리턴형이 없다(리턴형이 있는 경우 : 일반 인스턴스 메소드)
 * 				3) 변수의 초기화, 메모리에 저장시에 호출되는 메소드
 * 					-------- 시작 동시에 수행하는 기능이 있는 경우
 * 							------------- 웹, 윈도우(화면 UI가 존재)
 * 							= 자동 로그인, 쿠기, 윈도우 화면 디자인, 데이터베이스 연결, 서버 연결 ...
 * 							= 생성자를 많이 쓰는 이유는 프로그램이 구동될 때 첫번째로 호출되는 메소드이 이기 때문
 * 				4) 오버로딩을 지원
 * 					초기화 => 직접 초기화(매개변수X), 사용자로부터 받아서 초기화(매개변수O)
 * 					오버로딩은 사실 일반메소드에서 등장하지 않고, 생성자에서 많이 등장함. 
 * 					=> 메소드명이 동일
 * 					=> 매개변수가 다르다(갯수, 데이터형)
 * 					=> 리턴형은 관계가 없다. 						
 * 															 저장시
 * 					method() ==============================> method()
 * 					method(int a) =========================> method(int)
 * 					method(int b) =========================> method(int)
 * 					method(int a,b) =======================> method(int, int)
 * 					***** 같은 메소드명을 이용해서 다른 기능을 추가할 때 사용
 * 					# 매개변수명과는 상관이 없다. 
 * 		= this 키워드
 * 2) 상속
 * 		= 자바 상속의 특징
 * 		= super 키워드
 * 		= 메소드 오버라이딩
 * 		= final 키워드
 * 		= Object 클래스
 * 3) 인터페이스 / 추상클래스
 * 		= 인터페이스 / 추상클래스의 차이점
 * 		= 인터페이스 / 추상클래스 정의
 * 		= 인터페이스 / 추상클래스 구현방법
 * 		= 인터페이스 상속
 * 		= 1.8 => 인터페이스 default 메소드 
 * 4) 예외처리(오늘 배울 내용)
 * 		= 예외처리 종류 (예외 복구, 예외 회피)
 * 		= 자바에서 제공하는 예외 처리 클래스 (계층구조)
 * 		= 실행 순서
 * 		= 사용자정의 예외처리 ==> 호출 방법
 * ----------------------------------------------- 자바 문법 사항
 *  라이브러리 
 *  -------Object, String, StringBuffer, Math, Wrapper ==> java.lang
 * 		   StringTokenizer, Date , Calendar, SimpleDateFormat
 * 	    |- List , Set, Map ===> java.util		
 * 예외  |  IO
 * 처리	|  ----------------------------------------------------------- 웹
 * 필요	|-  SQL => java.sql *****
 * 		  ----------------------------------------------------------- 웹 관련 라이브러리별도 다운로드
 */
public class MainClass_클래스 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
